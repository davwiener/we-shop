{"ast":null,"code":"var _jsxFileName = \"/Users/davidwiener/Documents/react-projeckts/we-shop/client/src/services/popUp-service.tsx\";\nimport * as Yup from \"yup\";\nimport SignIn from \"../we-shop/sign-in/sign-in\";\nimport React from \"react\";\nconst PopUpService = {\n  openPopup(tabName) {\n    switch (tabName) {\n      case \"My Acount\":\n        {\n          break;\n        }\n\n      case \"Products\":\n        {\n          break;\n        }\n\n      case \"Today's Deals\":\n        {\n          break;\n        }\n\n      case \"Help\":\n        {\n          break;\n        }\n\n      case \"Register\":\n        {\n          return /*#__PURE__*/React.createElement(SignIn, {\n            newUser: true,\n            onRegister: tab => this.openPopup(tab),\n            inputs: [\"email\", \"password\", \"confirmPassword\"].map(input => usableInputs[input]),\n            secunedFuncVar: \"Connect\",\n            secunedFunc: tab => this.openPopup(tab),\n            text: \"Connect\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 11\n            }\n          });\n          break;\n        }\n\n      case \"Connect\":\n        {\n          return /*#__PURE__*/React.createElement(SignIn, {\n            newUser: true,\n            onRegister: tab => this.openPopup(tab),\n            inputs: [\"email\", \"password\"].map(input => usableInputs[input]),\n            secunedFunc: tab => this.openPopup(tab),\n            secunedFuncVar: \"Register\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 11\n            }\n          });\n        }\n\n      default:\n        {\n          console.log(\"Register\");\n          break;\n        }\n    }\n  } //   case \"Register\": {\n  //     return\n  //       <SignIn\n  //         newUser={true}\n  //         onRegister={(tab: string) => openPopup(tab)}\n  //         inputs={[\"email\", \"password\", \"confirmPassword\"].map(\n  //           (input: string) => usableInputs[input]\n  //         )}\n  //         secunedFuncVar=\"Connect\"\n  //         secunedFunc={(tab: string) => openPopup(tab)}\n  //         text={\"Connect\"}\n  //       ></SignIn>\n  //     break;\n  //   case \"Connect\": {\n  //     return\n  //       <SignIn\n  //         newUser={true}\n  //         onClose={closePopup}\n  //         onRegister={(tab: string) => openPopup(tab)}\n  //         inputs={[\"email\", \"password\"].map((input) => usableInputs[input])}\n  //         secunedFunc={(tab: string) => openPopup(tab)}\n  //         secunedFuncVar=\"Register\"\n  //       ></SignIn>\n  //     );\n  //     break;\n  //   }\n  // const closePopup = () => {\n  //   setShowPopup(false);\n  //   setPopup({});\n  // };\n\n\n};\nexport const usableInputs = {\n  email: {\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Email\",\n    validateFunc: Yup.string().email().required(\"Required\")\n  },\n  password: {\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Password\",\n    validateFunc: Yup.string().required(\"No password provided.\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n  },\n  confirmPassword: {\n    name: \"confirmPassword\",\n    type: \"password\",\n    placeholder: \"confirm Password\",\n    validateFunc: Yup.string().required(\"No password provided.\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/(?=.*[0-9])/, \"Password must contain a number.\").test(\"passwords-match\", \"Passwords must match\", function (value) {\n      return this.parent.password === value;\n    })\n  }\n};\nexport default PopUpService;","map":{"version":3,"sources":["/Users/davidwiener/Documents/react-projeckts/we-shop/client/src/services/popUp-service.tsx"],"names":["Yup","SignIn","React","PopUpService","openPopup","tabName","tab","map","input","usableInputs","console","log","email","name","type","placeholder","validateFunc","string","required","password","min","matches","confirmPassword","test","value","parent"],"mappings":"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","sourcesContent":["import * as Yup from \"yup\";\nimport SignIn from \"../we-shop/sign-in/sign-in\";\nimport React from \"react\";\n\nconst PopUpService = {\n  openPopup(tabName: string) {\n    switch (tabName) {\n      case \"My Acount\": {\n        break;\n      }\n      case \"Products\": {\n        break;\n      }\n      case \"Today's Deals\": {\n        break;\n      }\n      case \"Help\": {\n        break;\n      }\n      case \"Register\": {\n        return (\n          <SignIn\n            newUser={true}\n            onRegister={(tab: string) => this.openPopup(tab)}\n            inputs={[\"email\", \"password\", \"confirmPassword\"].map(\n              (input: string) => usableInputs[input]\n            )}\n            secunedFuncVar=\"Connect\"\n            secunedFunc={(tab: string) => this.openPopup(tab)}\n            text={\"Connect\"}\n          ></SignIn>\n        );\n        break;\n      }\n      case \"Connect\": {\n        return (\n          <SignIn\n            newUser={true}\n            onRegister={(tab: string) => this.openPopup(tab)}\n            inputs={[\"email\", \"password\"].map((input) => usableInputs[input])}\n            secunedFunc={(tab: string) => this.openPopup(tab)}\n            secunedFuncVar=\"Register\"\n          ></SignIn>\n        );\n      }\n      default: {\n        console.log(\"Register\");\n        break;\n      }\n    }\n  },\n  //   case \"Register\": {\n  //     return\n  //       <SignIn\n  //         newUser={true}\n  //         onRegister={(tab: string) => openPopup(tab)}\n  //         inputs={[\"email\", \"password\", \"confirmPassword\"].map(\n  //           (input: string) => usableInputs[input]\n  //         )}\n  //         secunedFuncVar=\"Connect\"\n  //         secunedFunc={(tab: string) => openPopup(tab)}\n  //         text={\"Connect\"}\n  //       ></SignIn>\n  //     break;\n\n  //   case \"Connect\": {\n  //     return\n  //       <SignIn\n  //         newUser={true}\n  //         onClose={closePopup}\n  //         onRegister={(tab: string) => openPopup(tab)}\n  //         inputs={[\"email\", \"password\"].map((input) => usableInputs[input])}\n  //         secunedFunc={(tab: string) => openPopup(tab)}\n  //         secunedFuncVar=\"Register\"\n  //       ></SignIn>\n  //     );\n  //     break;\n  //   }\n\n  // const closePopup = () => {\n  //   setShowPopup(false);\n  //   setPopup({});\n  // };\n};\nexport const usableInputs: any = {\n  email: {\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Email\",\n    validateFunc: Yup.string().email().required(\"Required\"),\n  },\n  password: {\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Password\",\n    validateFunc: Yup.string()\n      .required(\"No password provided.\")\n      .min(8, \"Password is too short - should be 8 chars minimum.\")\n      .matches(/(?=.*[0-9])/, \"Password must contain a number.\"),\n  },\n  confirmPassword: {\n    name: \"confirmPassword\",\n    type: \"password\",\n    placeholder: \"confirm Password\",\n    validateFunc: Yup.string()\n      .required(\"No password provided.\")\n      .min(8, \"Password is too short - should be 8 chars minimum.\")\n      .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n      .test(\"passwords-match\", \"Passwords must match\", function (value) {\n        return this.parent.password === value;\n      }),\n  },\n};\nexport default PopUpService;\n"]},"metadata":{},"sourceType":"module"}