{"ast":null,"code":"var _jsxFileName = \"/Users/davidwiener/Documents/react-projeckts/we-shop/client/src/we-shop/sign-in/sign-in.js\";\nimport React, { useState } from \"react\";\nimport InputText from \"../components/input-text/input-text\";\nimport WeShopButton from \"../components/we-shop-button/we-shop-button\";\nimport ConnectService from \"../../services/connect-service\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./sign-in.scss\";\n\nconst SignIn = () => //const [email, setEmail] = useState(\"\");\n// const [password, setPassword] = useState(\"\");\n// const [confirmPassword, setConfirmPassword] = useState(\"\");\n// const [newUser, setNewUSer] = useState(\"\");\n// const [validMail, setValidMail] = useState(false);\n// const [validPassword, setValidPassword] = useState(false);\n// const [validConfirmPassword, setValidConfirmPassword] = useState(false);\n// function onConfirm() {\n//   if (newUser) {\n//     ConnectService.register({\n//       email: email,\n//       password: password\n//     });\n//   } else {\n//     ConnectService.connect({\n//       email: email,\n//       password: password\n//     });\n//   }\n//   props.onClose();\n// }\n// function onCanncel() {\n//   props.onClose();\n// }\n// return (\nReact.createElement(Formik, {\n  initialValues: {\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    newUser: false\n  } // onSubmit={async values => {\n  //   await new Promise(resolve => setTimeout(resolve, 500));\n  //   alert(JSON.stringify(values, null, 2));\n  // }}\n  // validationSchema={Yup.object().shape({\n  //   email: Yup.string()\n  //     .email()\n  //     .required(\"Required\"),\n  //   password: Yup.string()\n  //     .required(\"No password provided.\")\n  //     .min(8, \"Password is too short - should be 8 chars minimum.\")\n  //     .matches(/(?=.*[0-9])/, \"Password must contain a number.\"),\n  //   confirmPassword: Yup.string()\n  //     .required(\"No password provided.\")\n  //     .min(8, \"Password is too short - should be 8 chars minimum.\")\n  //     .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n  // })}\n  ,\n  onSubmit: async values => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    alert(JSON.stringify(values, null, 2));\n  },\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email().required(\"Required\")\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, props => {\n  const values = props.values,\n        touched = props.touched,\n        errors = props.errors,\n        dirty = props.dirty,\n        isSubmitting = props.isSubmitting,\n        handleChange = props.handleChange,\n        handleBlur = props.handleBlur,\n        handleSubmit = props.handleSubmit,\n        handleReset = props.handleReset;\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    style: {\n      display: \"block\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"input\", {\n    id: \"email\",\n    placeholder: \"Enter your email\",\n    type: \"text\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    className: errors.email && touched.email ? \"text-input error\" : \"text-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), errors.email && touched.email && React.createElement(\"div\", {\n    className: \"input-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, errors.email), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"outline\",\n    onClick: handleReset,\n    disabled: !dirty || isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"Submit\"));\n}); //}\n\n\nexport default SignIn;","map":{"version":3,"sources":["/Users/davidwiener/Documents/react-projeckts/we-shop/client/src/we-shop/sign-in/sign-in.js"],"names":["React","useState","InputText","WeShopButton","ConnectService","Formik","Yup","SignIn","email","password","confirmPassword","newUser","values","Promise","resolve","setTimeout","alert","JSON","stringify","object","shape","string","required","props","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","display"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport InputText from \"../components/input-text/input-text\";\nimport WeShopButton from \"../components/we-shop-button/we-shop-button\";\nimport ConnectService from \"../../services/connect-service\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport \"./sign-in.scss\";\nconst SignIn = () => (\n  //const [email, setEmail] = useState(\"\");\n  // const [password, setPassword] = useState(\"\");\n  // const [confirmPassword, setConfirmPassword] = useState(\"\");\n  // const [newUser, setNewUSer] = useState(\"\");\n  // const [validMail, setValidMail] = useState(false);\n  // const [validPassword, setValidPassword] = useState(false);\n  // const [validConfirmPassword, setValidConfirmPassword] = useState(false);\n\n  // function onConfirm() {\n  //   if (newUser) {\n  //     ConnectService.register({\n  //       email: email,\n  //       password: password\n  //     });\n  //   } else {\n  //     ConnectService.connect({\n  //       email: email,\n  //       password: password\n  //     });\n  //   }\n  //   props.onClose();\n  // }\n  // function onCanncel() {\n  //   props.onClose();\n  // }\n\n  // return (\n  <Formik\n    initialValues={{\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      newUser: false\n    }}\n    // onSubmit={async values => {\n    //   await new Promise(resolve => setTimeout(resolve, 500));\n    //   alert(JSON.stringify(values, null, 2));\n    // }}\n    // validationSchema={Yup.object().shape({\n    //   email: Yup.string()\n    //     .email()\n    //     .required(\"Required\"),\n    //   password: Yup.string()\n    //     .required(\"No password provided.\")\n    //     .min(8, \"Password is too short - should be 8 chars minimum.\")\n    //     .matches(/(?=.*[0-9])/, \"Password must contain a number.\"),\n    //   confirmPassword: Yup.string()\n    //     .required(\"No password provided.\")\n    //     .min(8, \"Password is too short - should be 8 chars minimum.\")\n    //     .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n    // })}\n    onSubmit={async values => {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      alert(JSON.stringify(values, null, 2));\n    }}\n    validationSchema={Yup.object().shape({\n      email: Yup.string()\n        .email()\n        .required(\"Required\")\n    })}\n  >\n    {/* <Formik\n    initialValues={{ email: \"\" }}\n    onSubmit={async values => {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      alert(JSON.stringify(values, null, 2));\n    }}\n    validationSchema={Yup.object().shape({\n      email: Yup.string()\n        .email()\n        .required(\"Required\")\n    })}\n  > */}\n    {/* {props => {\n      const {\n        values,\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      } = props;\n      function inputEmail() {\n        return (\n          <div className=\"input-container\">\n            <InputText\n              className={errors.password && touched.password && \"error\"}\n              name={\"email\"}\n              valid={!errors.email && touched.email}\n              placeholder={\"Email\"}\n              type={\"email\"}\n              value={values.email}\n              id={\"username\"}\n              onChange={handleChange}\n              handleBlur={handleBlur}\n            ></InputText>\n            {errors.email && touched.email && (\n              <div className=\"input-feedback\">{errors.email}</div>\n            )}\n          </div>\n        );\n      }\n      function inputPassword() {\n        return (\n          <div className=\"input-container\">\n            <InputText\n              className={errors.password && touched.password && \"error\"}\n              name={\"password\"}\n              valid={!errors.password && touched.password}\n              placeholder={\"Password\"}\n              textVissible={false}\n              type={\"password\"}\n              value={values.password}\n              onChange={handleChange}\n              id=\"password\"\n              handleBlur={handleBlur}\n            ></InputText>\n            {errors.password && touched.password && (\n              <div className=\"input-feedback\">{errors.password}</div>\n            )}\n          </div>\n        );\n      }\n      function inputConfirmPassword() {\n        if (values.newUser) {\n          return (\n            <InputText\n              className={errors.password && touched.password && \"error\"}\n              name={\"confirmPassword\"}\n              // valid={validConfirmPassword}\n              placeholder={\"Confirm Password\"}\n              textVissible={false}\n              type={\"password\"}\n              value={values.confirmPassword}\n              onChange={handleChange}\n              handleBlur={handleBlur}\n            ></InputText>\n          );\n        }\n      }\n      return (\n        <form onSubmit={handleSubmit}>\n          <div className=\"sign-in-container\">\n            <div className=\"input-container\">\n              <div className=\"input-fields-container\">\n                {inputEmail()} {inputPassword()} {inputConfirmPassword()}\n              </div>\n              <div className=\"buttons\">\n                <WeShopButton\n                  type=\"submit\"\n                  disable={isSubmitting}\n                  // onClick={handleSubmit}\n                  text={values.newUser ? \"Register\" : \"Connect\"}\n                ></WeShopButton>\n                <WeShopButton\n                  seconderyButton={true}\n                  // onClick={e => onCanncel()}\n                  text={\"cancel\"}\n                ></WeShopButton>\n              </div>\n            </div>\n            <div className=\"new-user-container\">\n              <WeShopButton\n                className={errors.password && touched.password && \"error\"}\n                onClick={e => (values.newUser = !values.newUser)}\n                text={values.newUser ? \"I already have an acount\" : \"register\"}\n              ></WeShopButton>\n            </div>\n          </div>\n        </form>\n      );\n    }} */}\n    {props => {\n      const {\n        values,\n        touched,\n        errors,\n        dirty,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        handleReset\n      } = props;\n      return (\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"email\" style={{ display: \"block\" }}>\n            Email\n          </label>\n          <input\n            id=\"email\"\n            placeholder=\"Enter your email\"\n            type=\"text\"\n            value={values.email}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            className={\n              errors.email && touched.email ? \"text-input error\" : \"text-input\"\n            }\n          />\n          {errors.email && touched.email && (\n            <div className=\"input-feedback\">{errors.email}</div>\n          )}\n\n          <button\n            type=\"button\"\n            className=\"outline\"\n            onClick={handleReset}\n            disabled={!dirty || isSubmitting}\n          >\n            Reset\n          </button>\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      );\n    }}\n  </Formik>\n);\n//}\nexport default SignIn;\n"]},"metadata":{},"sourceType":"module"}