{"ast":null,"code":"var _jsxFileName = \"/Users/davidwiener/Documents/react-projeckts/we-shop/client/src/we-shop/sign-in/sign-in.js\";\nimport React, { useState } from \"react\";\nimport InputText from \"../components/input-text/input-text\";\nimport WeShopButton from \"../components/we-shop-button/we-shop-button\";\nimport ConnectService from \"../../services/connect-service\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./sign-in.scss\";\n\nconst SignIn = () => //const [email, setEmail] = useState(\"\");\n// const [password, setPassword] = useState(\"\");\n// const [confirmPassword, setConfirmPassword] = useState(\"\");\n// const [newUser, setNewUSer] = useState(\"\");\n// const [validMail, setValidMail] = useState(false);\n// const [validPassword, setValidPassword] = useState(false);\n// const [validConfirmPassword, setValidConfirmPassword] = useState(false);\n// function onConfirm() {\n//   if (newUser) {\n//     ConnectService.register({\n//       email: email,\n//       password: password\n//     });\n//   } else {\n//     ConnectService.connect({\n//       email: email,\n//       password: password\n//     });\n//   }\n//   props.onClose();\n// }\n// function onCanncel() {\n//   props.onClose();\n// }\n// return (\n// <Formik\n//   initialValues={{\n//     email: \"\",\n//     password: \"\",\n//     confirmPassword: \"\",\n//     newUser: false\n//   }}\n//   onSubmit={(values, { setSubmitting }) => {\n//     console.log(\"submit\");\n//   }}\n//   validationSchema={Yup.object().shape({\n//     email: Yup.string()\n//       .email()\n//       .required(\"Required\"),\n//     password: Yup.string()\n//       .required(\"No password provided.\")\n//       .min(8, \"Password is too short - should be 8 chars minimum.\")\n//       .matches(/(?=.*[0-9])/, \"Password must contain a number.\"),\n//     confirmPassword: Yup.string()\n//       .required(\"No password provided.\")\n//       .min(8, \"Password is too short - should be 8 chars minimum.\")\n//       .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n//   })}\n// >\n//   {props => {\n//     const {\n//       values,\n//       touched,\n//       errors,\n//       isSubmitting,\n//       handleChange,\n//       handleBlur,\n//       handleSubmit\n//     } = props;\n//     function inputEmail() {\n//       return (\n//         <div className=\"input-container\">\n//           <InputText\n//             className={errors.password && touched.password && \"error\"}\n//             name={\"email\"}\n//             valid={!errors.email && touched.email}\n//             placeholder={\"Email\"}\n//             type={\"email\"}\n//             value={values.email}\n//             id={\"username\"}\n//             onChange={handleChange}\n//             handleBlur={handleBlur}\n//           ></InputText>\n//           {errors.email && touched.email && (\n//             <div className=\"input-feedback\">{errors.email}</div>\n//           )}\n//         </div>\n//       );\n//     }\n//     function inputPassword() {\n//       return (\n//         <div className=\"input-container\">\n//           <InputText\n//             className={errors.password && touched.password && \"error\"}\n//             name={\"password\"}\n//             valid={!errors.password && touched.password}\n//             placeholder={\"Password\"}\n//             textVissible={false}\n//             type={\"password\"}\n//             value={values.password}\n//             onChange={handleChange}\n//             id=\"password\"\n//             handleBlur={handleBlur}\n//           ></InputText>\n//           {errors.password && touched.password && (\n//             <div className=\"input-feedback\">{errors.password}</div>\n//           )}\n//         </div>\n//       );\n//     }\n//     function inputConfirmPassword() {\n//       if (values.newUser) {\n//         return (\n//           <InputText\n//             className={errors.password && touched.password && \"error\"}\n//             name={\"confirmPassword\"}\n//             // valid={validConfirmPassword}\n//             placeholder={\"Confirm Password\"}\n//             textVissible={false}\n//             type={\"password\"}\n//             value={values.confirmPassword}\n//             onChange={handleChange}\n//             handleBlur={handleBlur}\n//           ></InputText>\n//         );\n//       }\n//     }\n//     return (\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"sign-in-container\">\n//           <div className=\"input-container\">\n//             <div className=\"input-fields-container\">\n//               {inputEmail()} {inputPassword()} {inputConfirmPassword()}\n//             </div>\n//             <div className=\"buttons\">\n//               <WeShopButton\n//                 type=\"submit\"\n//                 disable={isSubmitting}\n//                 // onClick={handleSubmit}\n//                 text={values.newUser ? \"Register\" : \"Connect\"}\n//               ></WeShopButton>\n//               <WeShopButton\n//                 seconderyButton={true}\n//                 // onClick={e => onCanncel()}\n//                 text={\"cancel\"}\n//               ></WeShopButton>\n//             </div>\n//           </div>\n//           <div className=\"new-user-container\">\n//             <WeShopButton\n//               className={errors.password && touched.password && \"error\"}\n//               onClick={e => (values.newUser = !values.newUser)}\n//               text={values.newUser ? \"I already have an acount\" : \"register\"}\n//             ></WeShopButton>\n//           </div>\n//         </div>\n//       </form>\n//     );\n//   }}\n// </Formik>\nReact.createElement(Formik, {\n  initialValues: {\n    email: \"\",\n    password: \"\"\n  },\n  validate: values => {\n    const errors = {};\n\n    if (!values.email) {\n      errors.email = \"Required\";\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n      errors.email = \"Invalid email address\";\n    }\n\n    return errors;\n  },\n  onSubmit: (values, {\n    setSubmitting\n  }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 400);\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 163\n  },\n  __self: this\n}, ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting\n  /* and other goodies */\n\n}) => React.createElement(\"form\", {\n  onSubmit: handleSubmit,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 193\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"email\",\n  name: \"email\",\n  onChange: handleChange,\n  onBlur: handleBlur,\n  value: values.email,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 194\n  },\n  __self: this\n}), errors.email && touched.email && errors.email, React.createElement(\"input\", {\n  type: \"password\",\n  name: \"password\",\n  onChange: handleChange,\n  onBlur: handleBlur,\n  value: values.password,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 202\n  },\n  __self: this\n}), errors.password && touched.password && errors.password, React.createElement(\"button\", {\n  type: \"submit\",\n  disabled: isSubmitting,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 210\n  },\n  __self: this\n}, \"Submit\"))); //}\n\n\nexport default SignIn;","map":{"version":3,"sources":["/Users/davidwiener/Documents/react-projeckts/we-shop/client/src/we-shop/sign-in/sign-in.js"],"names":["React","useState","InputText","WeShopButton","ConnectService","Formik","Yup","SignIn","email","password","values","errors","test","setSubmitting","setTimeout","alert","JSON","stringify","touched","handleChange","handleBlur","handleSubmit","isSubmitting"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,YAAP,MAAyB,6CAAzB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,OAAO,gBAAP;;AACA,MAAMC,MAAM,GAAG,MACb;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAC,MAAD;AACE,EAAA,aAAa,EAAE;AAAEC,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,QAAQ,EAAE;AAAvB,GADjB;AAEE,EAAA,QAAQ,EAAEC,MAAM,IAAI;AAClB,UAAMC,MAAM,GAAG,EAAf;;AACA,QAAI,CAACD,MAAM,CAACF,KAAZ,EAAmB;AACjBG,MAAAA,MAAM,CAACH,KAAP,GAAe,UAAf;AACD,KAFD,MAEO,IACL,CAAC,2CAA2CI,IAA3C,CAAgDF,MAAM,CAACF,KAAvD,CADI,EAEL;AACAG,MAAAA,MAAM,CAACH,KAAP,GAAe,uBAAf;AACD;;AACD,WAAOG,MAAP;AACD,GAZH;AAaE,EAAA,QAAQ,EAAE,CAACD,MAAD,EAAS;AAAEG,IAAAA;AAAF,GAAT,KAA+B;AACvCC,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeP,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAG,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAHS,EAGP,GAHO,CAAV;AAID,GAlBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAoBG,CAAC;AACAH,EAAAA,MADA;AAEAC,EAAAA,MAFA;AAGAO,EAAAA,OAHA;AAIAC,EAAAA,YAJA;AAKAC,EAAAA,UALA;AAMAC,EAAAA,YANA;AAOAC,EAAAA;AACA;;AARA,CAAD,KAUC;AAAM,EAAA,QAAQ,EAAED,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AACE,EAAA,IAAI,EAAC,OADP;AAEE,EAAA,IAAI,EAAC,OAFP;AAGE,EAAA,QAAQ,EAAEF,YAHZ;AAIE,EAAA,MAAM,EAAEC,UAJV;AAKE,EAAA,KAAK,EAAEV,MAAM,CAACF,KALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAQGG,MAAM,CAACH,KAAP,IAAgBU,OAAO,CAACV,KAAxB,IAAiCG,MAAM,CAACH,KAR3C,EASE;AACE,EAAA,IAAI,EAAC,UADP;AAEE,EAAA,IAAI,EAAC,UAFP;AAGE,EAAA,QAAQ,EAAEW,YAHZ;AAIE,EAAA,MAAM,EAAEC,UAJV;AAKE,EAAA,KAAK,EAAEV,MAAM,CAACD,QALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EATF,EAgBGE,MAAM,CAACF,QAAP,IAAmBS,OAAO,CAACT,QAA3B,IAAuCE,MAAM,CAACF,QAhBjD,EAiBE;AAAQ,EAAA,IAAI,EAAC,QAAb;AAAsB,EAAA,QAAQ,EAAEa,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,CA9BJ,CAzJF,C,CA+MA;;;AACA,eAAef,MAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport InputText from \"../components/input-text/input-text\";\nimport WeShopButton from \"../components/we-shop-button/we-shop-button\";\nimport ConnectService from \"../../services/connect-service\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport \"./sign-in.scss\";\nconst SignIn = () => (\n  //const [email, setEmail] = useState(\"\");\n  // const [password, setPassword] = useState(\"\");\n  // const [confirmPassword, setConfirmPassword] = useState(\"\");\n  // const [newUser, setNewUSer] = useState(\"\");\n  // const [validMail, setValidMail] = useState(false);\n  // const [validPassword, setValidPassword] = useState(false);\n  // const [validConfirmPassword, setValidConfirmPassword] = useState(false);\n\n  // function onConfirm() {\n  //   if (newUser) {\n  //     ConnectService.register({\n  //       email: email,\n  //       password: password\n  //     });\n  //   } else {\n  //     ConnectService.connect({\n  //       email: email,\n  //       password: password\n  //     });\n  //   }\n  //   props.onClose();\n  // }\n  // function onCanncel() {\n  //   props.onClose();\n  // }\n\n  // return (\n  // <Formik\n  //   initialValues={{\n  //     email: \"\",\n  //     password: \"\",\n  //     confirmPassword: \"\",\n  //     newUser: false\n  //   }}\n  //   onSubmit={(values, { setSubmitting }) => {\n  //     console.log(\"submit\");\n  //   }}\n  //   validationSchema={Yup.object().shape({\n  //     email: Yup.string()\n  //       .email()\n  //       .required(\"Required\"),\n  //     password: Yup.string()\n  //       .required(\"No password provided.\")\n  //       .min(8, \"Password is too short - should be 8 chars minimum.\")\n  //       .matches(/(?=.*[0-9])/, \"Password must contain a number.\"),\n  //     confirmPassword: Yup.string()\n  //       .required(\"No password provided.\")\n  //       .min(8, \"Password is too short - should be 8 chars minimum.\")\n  //       .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n  //   })}\n  // >\n  //   {props => {\n  //     const {\n  //       values,\n  //       touched,\n  //       errors,\n  //       isSubmitting,\n  //       handleChange,\n  //       handleBlur,\n  //       handleSubmit\n  //     } = props;\n  //     function inputEmail() {\n  //       return (\n  //         <div className=\"input-container\">\n  //           <InputText\n  //             className={errors.password && touched.password && \"error\"}\n  //             name={\"email\"}\n  //             valid={!errors.email && touched.email}\n  //             placeholder={\"Email\"}\n  //             type={\"email\"}\n  //             value={values.email}\n  //             id={\"username\"}\n  //             onChange={handleChange}\n  //             handleBlur={handleBlur}\n  //           ></InputText>\n  //           {errors.email && touched.email && (\n  //             <div className=\"input-feedback\">{errors.email}</div>\n  //           )}\n  //         </div>\n  //       );\n  //     }\n  //     function inputPassword() {\n  //       return (\n  //         <div className=\"input-container\">\n  //           <InputText\n  //             className={errors.password && touched.password && \"error\"}\n  //             name={\"password\"}\n  //             valid={!errors.password && touched.password}\n  //             placeholder={\"Password\"}\n  //             textVissible={false}\n  //             type={\"password\"}\n  //             value={values.password}\n  //             onChange={handleChange}\n  //             id=\"password\"\n  //             handleBlur={handleBlur}\n  //           ></InputText>\n  //           {errors.password && touched.password && (\n  //             <div className=\"input-feedback\">{errors.password}</div>\n  //           )}\n  //         </div>\n  //       );\n  //     }\n  //     function inputConfirmPassword() {\n  //       if (values.newUser) {\n  //         return (\n  //           <InputText\n  //             className={errors.password && touched.password && \"error\"}\n  //             name={\"confirmPassword\"}\n  //             // valid={validConfirmPassword}\n  //             placeholder={\"Confirm Password\"}\n  //             textVissible={false}\n  //             type={\"password\"}\n  //             value={values.confirmPassword}\n  //             onChange={handleChange}\n  //             handleBlur={handleBlur}\n  //           ></InputText>\n  //         );\n  //       }\n  //     }\n  //     return (\n  //       <form onSubmit={handleSubmit}>\n  //         <div className=\"sign-in-container\">\n  //           <div className=\"input-container\">\n  //             <div className=\"input-fields-container\">\n  //               {inputEmail()} {inputPassword()} {inputConfirmPassword()}\n  //             </div>\n  //             <div className=\"buttons\">\n  //               <WeShopButton\n  //                 type=\"submit\"\n  //                 disable={isSubmitting}\n  //                 // onClick={handleSubmit}\n  //                 text={values.newUser ? \"Register\" : \"Connect\"}\n  //               ></WeShopButton>\n  //               <WeShopButton\n  //                 seconderyButton={true}\n  //                 // onClick={e => onCanncel()}\n  //                 text={\"cancel\"}\n  //               ></WeShopButton>\n  //             </div>\n  //           </div>\n  //           <div className=\"new-user-container\">\n  //             <WeShopButton\n  //               className={errors.password && touched.password && \"error\"}\n  //               onClick={e => (values.newUser = !values.newUser)}\n  //               text={values.newUser ? \"I already have an acount\" : \"register\"}\n  //             ></WeShopButton>\n  //           </div>\n  //         </div>\n  //       </form>\n  //     );\n  //   }}\n  // </Formik>\n  <Formik\n    initialValues={{ email: \"\", password: \"\" }}\n    validate={values => {\n      const errors = {};\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n      ) {\n        errors.email = \"Invalid email address\";\n      }\n      return errors;\n    }}\n    onSubmit={(values, { setSubmitting }) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    }}\n  >\n    {({\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      isSubmitting\n      /* and other goodies */\n    }) => (\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"email\"\n          name=\"email\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.email}\n        />\n        {errors.email && touched.email && errors.email}\n        <input\n          type=\"password\"\n          name=\"password\"\n          onChange={handleChange}\n          onBlur={handleBlur}\n          value={values.password}\n        />\n        {errors.password && touched.password && errors.password}\n        <button type=\"submit\" disabled={isSubmitting}>\n          Submit\n        </button>\n      </form>\n    )}\n  </Formik>\n);\n//}\nexport default SignIn;\n"]},"metadata":{},"sourceType":"module"}